
@inproceedings{patel_comparative_2021,
	title = {A {Comparative} {Study} on {Shortest} {Path} {Visualization} using {Artificial} {Intelligence}},
	url = {https://ieeexplore.ieee.org/document/9596550},
	doi = {10.1109/ICRITO51393.2021.9596550},
	abstract = {In the modern computation system, that rely on various aspects to obtain the optimal results in easy manner appears more deterministic. There are several algorithms available that can distinguish a probable shortest path between two points, which helps students actively study algorithms with visualization. Therefore, in this study, we developed the GUI based shortest path finding tool consists of Dijkstra and A* algorithm. Further, in this study, the obtained shortest path results were graphically visualised and tabular output are stored in the database. The implementation of the algorithm and visualization was developed using Java AWT API and SWING package of Java. The Dijkstra and A* algorithm comparative analysis showed that the checks value and path length in terms of the A* algorithm is comparatively less than Dijkstra. Thus, it is affirmative that A * approach produces faster results and appeared as more efficient in terms of destination path finding than Dijkstra algorithm. Path finding is a fundamental feature of many significant applications and can be applied in static, interactive, and real-time situations. Such information shed light on the efficient application for computer gaming, robots, logistics, and crowd simulation.},
	urldate = {2024-04-29},
	booktitle = {2021 9th {International} {Conference} on {Reliability}, {Infocom} {Technologies} and {Optimization} ({Trends} and {Future} {Directions}) ({ICRITO})},
	author = {Patel, Gyanendra Mohan and Singh, Anupam and Bhala, Tanishka and Jora, Aryaman and Chandna, Divyansh},
	month = sep,
	year = {2021},
	keywords = {A * Algorithm, Artificial Intelligence, Dijkstra Algorithm, GUI, Java, Market research, Real-time systems, Reliability, Shortest Path, Tools, Visual databases, Visualization},
	pages = {1--4},
	file = {IEEE Xplore Full Text PDF:C\:\\Users\\Mikael\\Zotero\\storage\\WU2J4R32\\Patel et al. - 2021 - A Comparative Study on Shortest Path Visualization.pdf:application/pdf},
}

@article{rachmawati_analysis_2020,
	title = {Analysis of {Dijkstra}’s {Algorithm} and {A}* {Algorithm} in {Shortest} {Path} {Problem}},
	volume = {1566},
	issn = {1742-6588, 1742-6596},
	url = {https://iopscience.iop.org/article/10.1088/1742-6596/1566/1/012061},
	doi = {10.1088/1742-6596/1566/1/012061},
	abstract = {Abstract
            Finding the shortest path in direction effective is essential. To solve this shortest path problem, we usually using Dijkstra or A* algorithm. These two algorithms are often used in routing or road networks. This paper’s objective is to compare those two algorithms in solving this shortest path problem. In this research, Dijkstra and A* almost have the same performance when using it to solve town or regional scale maps, but A* is better when using it to solve a large scale map.},
	number = {1},
	urldate = {2024-04-29},
	journal = {Journal of Physics: Conference Series},
	author = {Rachmawati, Dian and Gustin, Lysander},
	month = jun,
	year = {2020},
	pages = {012061},
	file = {Full Text:C\:\\Users\\Mikael\\Zotero\\storage\\694MS5FB\\Rachmawati and Gustin - 2020 - Analysis of Dijkstra’s Algorithm and A Algorithm .pdf:application/pdf},
}

@book{siciliano_robotics_2009,
	address = {London},
	series = {Advanced textbooks in control and signal processing},
	title = {Robotics: modelling, planning and control},
	isbn = {978-1-84628-641-4 978-1-84628-642-1},
	shorttitle = {Robotics},
	publisher = {Springer},
	editor = {Siciliano, Bruno},
	year = {2009},
	note = {OCLC: ocn144222188},
	keywords = {Control systems, Manipulators (Mechanism), Motion, Robots},
}

@incollection{bhateja_performance_2021,
	address = {Singapore},
	title = {Performance {Analysis} of {Dijkstra}’s and the {A}-{Star} {Algorithm} on an {Obstacle} {Map}},
	volume = {1407},
	isbn = {9789811601705 9789811601712},
	url = {https://link.springer.com/10.1007/978-981-16-0171-2_8},
	language = {en},
	urldate = {2024-04-29},
	booktitle = {Data {Engineering} and {Intelligent} {Computing}},
	publisher = {Springer Singapore},
	author = {Sathvik, N. G. and Patil, Sharan},
	editor = {Bhateja, Vikrant and Satapathy, Suresh Chandra and Travieso-González, Carlos M. and Aradhya, V. N. Manjunath},
	year = {2021},
	doi = {10.1007/978-981-16-0171-2_8},
	note = {Series Title: Advances in Intelligent Systems and Computing},
	pages = {77--86},
}

@article{ogata_generic_2020,
	title = {A {Generic} {Approach} on {How} to {Formally} {Specify} and {Model} {Check} {Path} {Finding} {Algorithms}: {Dijkstra}, {A}* and {LPA}*},
	volume = {30},
	issn = {0218-1940, 1793-6403},
	shorttitle = {A {Generic} {Approach} on {How} to {Formally} {Specify} and {Model} {Check} {Path} {Finding} {Algorithms}},
	url = {https://www.worldscientific.com/doi/abs/10.1142/S0218194020400215},
	doi = {10.1142/S0218194020400215},
	abstract = {The paper describes how to formally specify three path finding algorithms in Maude, a rewriting logic-based programming/specification language, and how to model check if they enjoy desired properties with the Maude LTL model checker. The three algorithms are Dijkstra Shortest Path Finding Algorithm (DA), A* Algorithm and LPA* Algorithm. One desired property is that the algorithms always find the shortest path. To this end, we use a path finding algorithm (BFS) based on breadth-first search. BFS finds all paths from a start node to a goal node and the set of all shortest paths is extracted. We check if the path found by each algorithm is included in the set of all shortest paths for the property. A* is an extension of DA in that for each node [Formula: see text] an estimation [Formula: see text] of the distance to the goal node from [Formula: see text] is used and LPA* is an incremental version of A*. It is known that if [Formula: see text] is admissible, A* always finds the shortest path. We have found a possible relaxed sufficient condition. The relaxed condition is that there exists the shortest path such that for each node [Formula: see text] except for the start node on the path [Formula: see text] plus the cost to [Formula: see text] from the start node is less than the cost of any non-shortest path to the goal from the start. We informally justify the relaxed condition. For LPA*, if the relaxed condition holds in each updated version of a graph concerned including the initial graph, the shortest path is constructed. Based on the three case studies for DA, A* and LPA*, we summarize the formal specification and model checking techniques used as a generic approach to formal specification and model checking of path finding algorithms.},
	language = {en},
	number = {10},
	urldate = {2024-04-29},
	journal = {International Journal of Software Engineering and Knowledge Engineering},
	author = {Ogata, Kazuhiro},
	month = oct,
	year = {2020},
	pages = {1481--1523},
}

@article{foead_systematic_2021,
	title = {A {Systematic} {Literature} {Review} of {A}* {Pathfinding}},
	volume = {179},
	issn = {18770509},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S1877050921000399},
	doi = {10.1016/j.procs.2021.01.034},
	language = {en},
	urldate = {2024-04-29},
	journal = {Procedia Computer Science},
	author = {Foead, Daniel and Ghifari, Alifio and Kusuma, Marchel Budi and Hanafiah, Novita and Gunawan, Eric},
	year = {2021},
	pages = {507--514},
}

@book{koenig_dlite_2002,
	title = {D*{Lite}.},
	abstract = {Incremental heuristic search methods use heuristics to focus their search and reuse information from previous searches to find solutions to series of similar search tasks much faster than is possible by solving each search task from scratch. In this paper, we apply Lifelong Planning A* to robot navigation in unknown terrain, including goal-directed navigation in un- known terrain and mapping of unknown terrain. The resulting D* Lite algorithm is easy to understand and analyze. It im- plements the same behavior as Stentz' Focussed Dynamic A* but is algorithmically different. We prove properties about D* Lite and demonstrate experimentally the advantages of combining incremental and heuristic search for the applica- tions studied. We believe that these results provide a strong foundation for further research on fast replanning methods in artificial intelligence and robotics.},
	author = {Koenig, Sven and Likhachev, Maxim},
	month = jan,
	year = {2002},
	note = {Journal Abbreviation: Proceedings of the National Conference on Artificial Intelligence
Pages: 483
Publication Title: Proceedings of the National Conference on Artificial Intelligence},
}
